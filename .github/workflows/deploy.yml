name: deploy
on:
  workflow_call:
    inputs:
      delivery:
        description: Delivery ref no.
        type: number
        required: true
      environment:
        description: Environment prefix
        type: string
        required: true
      ci_call:
        type: boolean
        default: true
  workflow_dispatch:
    inputs:
      delivery:
        description: Delivery ref no.
        type: number
        required: true
      environment:
        description: Environment prefix
        type: string
        required: true
jobs:
  check_delivery:
    runs-on: ubuntu-latest
    steps:
    - name: Retrieve catalog delivery
      if: inputs.ci_call != true
      # https://github.com/dawidd6/action-download-artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        workflow: deliver.yml
        branch: main
        run_number: ${{ inputs.delivery }}
        name: 'delivery-${{ inputs.delivery }}'
        path: deliverable
    - name: Re-up delivery from catalog -> current
      if: inputs.ci_call != true
      uses: actions/upload-artifact@v3
      with:
        name: 'delivery-${{ inputs.delivery }}'
        path: deliverable
  deploy:
    needs: check_delivery
    runs-on: ubuntu-latest
    steps:
    - name: Get deliverables
      uses: actions/download-artifact@v3
      with:
        name: 'delivery-${{ inputs.delivery }}'
        path: deliverable
    - name: Get shas
      run: |
        echo SHA_IAC_BICEP=$(sha256sum deliverable/iac/bicep.tar.gz) >> $GITHUB_ENV
        echo SHA_SRC_EXTRACTOR=$(sha256sum deliverable/source/extractor.tar.gz) >> $GITHUB_ENV
    # TODO: For each tar file present:
    # - Get last-deployed sha for the supplied environment (using action secrets)
    # - If delivery sha is same then skip, otherwise:
    #    --> run deployment
    #    --> set new environment sha
    - name: Set environment sha
      uses: actions/github-script@v6
      with:
        script: |

          # const sodium = require('tweetsodium');

          const owner = context.repo.owner, repo = context.repo.repo;
          const pubKeyResult = await github.rest.actions.getRepoPublicKey({ owner, repo });
          const key_id = pubKeyResult.key_id;
          const secret_name = 'SHA_IAC_BICEP_${{ inputs.environment }}'.toUpper();
          const encrypted_value = encrypt('${{ env.SHA_IAC_BICEP }}', pubKeyResult.key);
          await github.rest.actions.createOrUpdateRepoSecret({ owner, repo, secret_name, encrypted_value, key_id });

          function encrypt(value, base64Key) {
            
            return 'helloooo';
          }